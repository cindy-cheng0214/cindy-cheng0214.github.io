.section .data
# There are two global variables:
#  1. array: Store the input numbers.
#  2. size: the number of the list
# You can modify the following two lines to test your program,
# but DO NOT change the line number
array: .dword 15, 20, 6, 35, 70, 7, 14, 36, 1, 21, 13, 3, 24, 5, 22, 2, 4, 10, 8, 12
size: .dword 20

# Variables for print function
# DO NOT modify these
dummy_msg: .ascii "   "
newline_msg: .ascii "\n"
ascii_msg: .ascii "Test"
magic_mem: .space 64

.section .text
.global main
main:

  # save return pointer
  addi sp, sp, -8
  sd ra, 0(sp)

  la a0, array      # assign array address to a0
  ld a2, size       # assign array size to a2

  li a3, 0          # low
  addi a2, a2, -1   # high

  jal quickSort     # jump to function

  jal print         # show results

  li a0, 0

  ld ra, 0(sp)
  addi sp, sp, 8

  ret               # return (jump to the address stored in register ra)

.global quickSort
quickSort:

  #########################
  # Finish your code here #
  #########################

  slli a3, a3, 3    # a3 = low
  slli a2, a2, 3    # a2 = high

  # use function partition(a3, a2)
  bge a3, a2, big   # high <= low
  addi sp, sp, -8
  sd ra, 0(sp)
  jal partition      
  ld ra, 0(sp)
  addi sp, sp, 8


  srli a3, a3, 3    # a3 = low
  srli a2, a2, 3    # a2 = high

  # use function quickSort(t6+1, a2) for back side(pivot+1 to high)
  addi sp, sp, -16
  sd ra, 0(sp)
  sd a3, 8(sp)
  addi a3, t6, 1
  jal quickSort
  ld ra ,0(sp)
  ld a3 ,8(sp)
  addi sp, sp, 16

  # use function quickSort(a3, t6-1) for front side(low to pivot-1)
  addi sp, sp, -16
  sd ra, 0(sp)
  sd a2, 8(sp)
  addi a2, t6, -1
  jal quickSort
  ld ra ,0(sp)
  ld a2 ,8(sp)
  addi sp, sp, 16


big:
  jalr x0, 0(x1)


.global partition
partition:
  slli a2, a2, 3    #size*8
  add  t1, a0, a2   #t1 high address, pivot
  ld   t2, 0(t1)    #t2 = arr[high]

  addi   t4, a3, 0        # t4 = point
  addi   t5, a3, 0        # t5 = i

for:
  bge  t5, a2, exit  #i>=size then exit
  add  a0, t5, a0
  ld   t3, 0(a0)
  sub  a0, a0, t5    #t3 = arr[i]

  bge  t3, t2, high  #t3>=pivot then high
  addi sp, sp, -8    #swag arr[i] arr[point]
  sd ra,0(sp)
  jal swap
  ld ra,0(sp)
  addi sp, sp, 8
  addi t4, t4, 8     #point=point+1
high:
  addi t5, t5, 8     #i=i+1
  j    for

exit:
  addi sp, sp, -8   # swag arr[i] arr[point]
  sd ra, 0(sp)
  jal swap
  ld ra, 0(sp)
  addi sp, sp, 8
  addi t6, t4, 0    # return point
  srli t6, t6, 3
  ret

.global swap
swap:
  add  a7, a0, t4     #a7 = arr[point] address
  add  a6, a0, t5     #a6 = arr[i] address
  ld   a5, 0(a7)      #a6 = arr[point]
  ld   a4, 0(a6)      #a4 = arr[i]
  sd   a5, 0(a6)
  sd   a4, 0(a7)
  jalr x0, 0(x1)


####################################
# Helper function to print results #
#     DO NOT modify this!!!!!!     #
####################################
.global print
print:

  addi sp, sp, -72
  sd s7, 64(sp)
  sd s6, 56(sp)
  sd s5, 48(sp)
  sd s4, 40(sp)
  sd s3, 32(sp)
  sd s2, 24(sp)
  sd s1, 16(sp)
  sd s0, 8(sp)
  sd ra, 0(sp)

  la s0, array
  ld s1, size

  li s2, 0

print_loop:
  slli s3, s2, 3
  add s3, s0, s3
  ld s4, 0(s3)

  li s3, 10
  div s5, s4, s3
  rem s4, s4, s3

  beq s5, zero, less_than_10

  addi s5, s5, 48
  la s7, ascii_msg 
  sw s5, 0(s7)

  la s7, magic_mem
  li s6, 64
  sw s6, 0(s7)
  li s6, 1
  sw s6, 8(s7)
  la s6, ascii_msg
  sw s6, 16(s7)
  li s6, 1
  sw s6, 24(s7)
  la s6, tohost
  sw s7, 0(s6)

wait1:
  la s6, fromhost
  ld s7, 0(s6)
  beq s7, zero, wait1

  sw zero, 0(s6)

less_than_10:

  addi s4, s4, 48
  la s7, ascii_msg 
  sw s4, 0(s7)

  la s7, magic_mem
  li s6, 64
  sw s6, 0(s7)
  li s6, 1
  sw s6, 8(s7)
  la s6, ascii_msg
  sw s6, 16(s7)
  li s6, 1
  sw s6, 24(s7)
  la s6, tohost
  sw s7, 0(s6)

wait2:
  la s6, fromhost
  ld s7, 0(s6)
  beq s7, zero, wait2

  sw zero, 0(s6)

  la s7, magic_mem
  li s6, 64
  sw s6, 0(s7)
  li s6, 1
  sw s6, 8(s7)
  la s6, newline_msg
  sw s6, 16(s7)
  li s6, 1
  sw s6, 24(s7)
  la s6, tohost
  sw s7, 0(s6)

wait3:
  la s6, fromhost
  ld s7, 0(s6)
  beq s7, zero, wait3

  sw zero, 0(s6)

  addi s2, s2, 1
  bne s2, s1, print_loop

  ld ra, 0(sp)
  ld s0, 8(sp)
  ld s1, 16(sp)
  ld s2, 24(sp)
  ld s3, 32(sp)
  ld s4, 40(sp)
  ld s5, 48(sp)
  ld s6, 56(sp)
  ld s7, 64(sp)
  addi sp, sp, 72

  ret